// Code generated by mockery v2.25.1. DO NOT EDIT.

package mocks

import (
	solutions "github.com/cloud-native-toolkit/itzcli/pkg/solutions"
	mock "github.com/stretchr/testify/mock"
)

// SolutionServiceClient is an autogenerated mock type for the SolutionServiceClient type
type SolutionServiceClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *SolutionServiceClient) Get(id string) (*solutions.Solution, error) {
	ret := _m.Called(id)

	var r0 *solutions.Solution
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*solutions.Solution, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *solutions.Solution); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*solutions.Solution)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: f
func (_m *SolutionServiceClient) GetAll(f *solutions.Filter) ([]solutions.Solution, error) {
	ret := _m.Called(f)

	var r0 []solutions.Solution
	var r1 error
	if rf, ok := ret.Get(0).(func(*solutions.Filter) ([]solutions.Solution, error)); ok {
		return rf(f)
	}
	if rf, ok := ret.Get(0).(func(*solutions.Filter) []solutions.Solution); ok {
		r0 = rf(f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]solutions.Solution)
		}
	}

	if rf, ok := ret.Get(1).(func(*solutions.Filter) error); ok {
		r1 = rf(f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSolutionServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSolutionServiceClient creates a new instance of SolutionServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSolutionServiceClient(t mockConstructorTestingTNewSolutionServiceClient) *SolutionServiceClient {
	mock := &SolutionServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
