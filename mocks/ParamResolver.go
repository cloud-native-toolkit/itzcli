// Code generated by mockery v2.25.1. DO NOT EDIT.

package mocks

import (
	pkg "github.com/cloud-native-toolkit/itzcli/pkg"
	mock "github.com/stretchr/testify/mock"
)

// ParamResolver is an autogenerated mock type for the ParamResolver type
type ParamResolver struct {
	mock.Mock
}

// EnabledFor provides a mock function with given fields: opt
func (_m *ParamResolver) EnabledFor(opt pkg.ResolverOption) bool {
	ret := _m.Called(opt)

	var r0 bool
	if rf, ok := ret.Get(0).(func(pkg.ResolverOption) bool); ok {
		r0 = rf(opt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Lookup provides a mock function with given fields: p
func (_m *ParamResolver) Lookup(p string) (string, bool) {
	ret := _m.Called(p)

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Supports provides a mock function with given fields:
func (_m *ParamResolver) Supports() pkg.ResolverOption {
	ret := _m.Called()

	var r0 pkg.ResolverOption
	if rf, ok := ret.Get(0).(func() pkg.ResolverOption); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pkg.ResolverOption)
	}

	return r0
}

type mockConstructorTestingTNewParamResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewParamResolver creates a new instance of ParamResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewParamResolver(t mockConstructorTestingTNewParamResolver) *ParamResolver {
	mock := &ParamResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
