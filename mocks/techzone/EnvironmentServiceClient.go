// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	techzone "github.com/cloud-native-toolkit/itzcli/pkg/techzone"
	mock "github.com/stretchr/testify/mock"
)

// EnvironmentServiceClient is an autogenerated mock type for the EnvironmentServiceClient type
type EnvironmentServiceClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *EnvironmentServiceClient) Get(id string) (*techzone.Environment, error) {
	ret := _m.Called(id)

	var r0 *techzone.Environment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*techzone.Environment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *techzone.Environment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*techzone.Environment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: f
func (_m *EnvironmentServiceClient) GetAll(f techzone.Filter) ([]techzone.Environment, error) {
	ret := _m.Called(f)

	var r0 []techzone.Environment
	var r1 error
	if rf, ok := ret.Get(0).(func(techzone.Filter) ([]techzone.Environment, error)); ok {
		return rf(f)
	}
	if rf, ok := ret.Get(0).(func(techzone.Filter) []techzone.Environment); ok {
		r0 = rf(f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]techzone.Environment)
		}
	}

	if rf, ok := ret.Get(1).(func(techzone.Filter) error); ok {
		r1 = rf(f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEnvironmentServiceClient creates a new instance of EnvironmentServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnvironmentServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *EnvironmentServiceClient {
	mock := &EnvironmentServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
